// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String    @default("customer") // roles: customer, admin
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders    Order[]
  reviews   ReviewItem[]
  cart      Cart?
  wishlist  Wishlist[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  reviews     ReviewItem[]
  orderItems  OrderItem[]
  wishlist    Wishlist[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  CartItem CartItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ReviewItem {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  rating      Int       
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  totalPrice  Float
  status      String      @default("pending") // pending, shipped, delivered, cancelled
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int @unique
  items       CartItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Wishlist {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime  @default(now())
}
